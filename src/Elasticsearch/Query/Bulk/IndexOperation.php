<?php

namespace Bdf\Prime\Indexer\Elasticsearch\Query\Bulk;

use Bdf\Prime\Indexer\Elasticsearch\Mapper\ElasticsearchMapperInterface;

/**
 * Indexes the specified document. If the document exists, replaces the document and increments the version.
 */
final class IndexOperation implements BulkOperationInterface
{
    /**
     * Document to create
     * If this value is an object, the mapper will be used to convert to elasticsearch fields
     *
     * @var array|object
     */
    private $document;

    /**
     * Document id
     * If not set, and cannot be extracted from document, an id will be generated by the index
     *
     * @var string|null
     */
    private ?string $id = null;

    /**
     * Extra option
     *
     * @var array
     */
    private array $options = [];

    /**
     * @param array|object $document Document to create. If this value is an object, the mapper will be used to convert to elasticsearch fields.
     */
    public function __construct($document)
    {
        $this->document = $document;
    }

    /**
     * Define the document id
     *
     * This value is optional.
     * If an id can be extracted from document parameter, it will be used.
     *
     * @param string $id
     *
     * @return $this
     */
    public function id(string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Define a custom option
     *
     * Available options :
     * - require_alias (bool) If true, the action must target an index alias. Defaults to false.
     * - dynamic_templates (array) See: https://www.elastic.co/guide/en/elasticsearch/reference/current/dynamic-templates.html
     *
     * @param string $name Option name
     * @param mixed $value Option value
     *
     * @return $this
     */
    public function option(string $name, $value): self
    {
        $this->options[$name] = $value;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function name(): string
    {
        return 'index';
    }

    /**
     * {@inheritdoc}
     */
    public function metadata(ElasticsearchMapperInterface $mapper): array
    {
        $id = $this->id;

        if ($id === null) {
            $document = $this->document;
            $id = is_object($document) ? $mapper->id($document) : ($document['_id'] ?? null);
        }

        $options = $this->options;

        if ($id) {
            $options['_id'] = $id;
        }

        return $options;
    }

    /**
     * {@inheritdoc}
     */
    public function value(ElasticsearchMapperInterface $mapper): ?array
    {
        $document = $this->document;

        if (is_object($document)) {
            $document = $mapper->toIndex($document);
        }

        // _id field is not allowed here : it's given on metadata
        unset($document['_id']);

        return $document;
    }
}
