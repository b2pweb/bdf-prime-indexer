<?php

namespace Bdf\Prime\Indexer\Elasticsearch\Query\Bulk;

use Bdf\Prime\Indexer\Elasticsearch\Mapper\ElasticsearchMapperInterface;
use Bdf\Prime\Indexer\Elasticsearch\Query\Expression\Script;
use Bdf\Prime\Indexer\Exception\InvalidQueryException;

/**
 * Performs a partial document update
 * Can be use for insert a new document if upsert option is enabled
 *
 * @see https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html#bulk-update
 */
final class UpdateOperation implements BulkOperationInterface
{
    /**
     * Document to update
     * If this value is an object, the mapper will be used to convert to elasticsearch fields
     *
     * @var array|object|null
     */
    private $document;

    /**
     * Document id
     * If not set, and cannot be extracted from document, an id will be generated by the index
     *
     * @var string|null
     */
    private ?string $id = null;

    /**
     * Perform an upsert operation if the document do not exists (i.e. insert or update)
     * This value can be an array of properties, or the entity, or true to use the document passed as document parameter
     *
     * @var array|object|true|null
     */
    private $upsert;

    /**
     * Update document using a script
     *
     * @var string|Script|null
     */
    private $script;

    /**
     * Extra option
     *
     * @var array
     */
    private array $options = [];

    /**
     * @param array|object|null $document Document to update
     */
    public function __construct($document = null)
    {
        $this->document = $document;
    }

    /**
     * Define the document id
     *
     * This value is optional.
     * If an id can be extracted from document parameter, it will be used.
     *
     * @param string $id
     *
     * @return $this
     */
    public function id(string $id): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Allow to perform an insert operation if the document is not found
     *
     * If `true` is passed as argument, the upserted document will be same as defined with {@see ElasticsearchUpdateQuery::document()}.
     * If an entity object is passed, {@see ElasticsearchMapperInterface} will be used to extract fields.
     *
     * @param array|object|true $upsert Fields (or entity) to insert.
     *
     * @return $this
     */
    public function upsert($upsert = true): self
    {
        $this->upsert = $upsert;

        return $this;
    }

    /**
     * Update document using a script
     *
     * @param string|Script $script Script code, or object for specify custom language or parameters
     *
     * @return $this
     *
     * @see Script
     */
    public function script($script): self
    {
        $this->script = $script;

        return $this;
    }

    /**
     * Define a custom option
     *
     * Available options :
     * - require_alias (bool) If true, the action must target an index alias. Defaults to false.
     *
     * @param string $name Option name
     * @param mixed $value Option value
     *
     * @return $this
     */
    public function option(string $name, $value): self
    {
        $this->options[$name] = $value;

        return $this;
    }

    /**
     * {@inheritdoc}
     */
    public function name(): string
    {
        return 'update';
    }

    /**
     * {@inheritdoc}
     */
    public function metadata(ElasticsearchMapperInterface $mapper): array
    {
        $options = $this->options;
        $options['_id'] = $this->resolveId($mapper);

        return $options;
    }

    /**
     * {@inheritdoc}
     */
    public function value(ElasticsearchMapperInterface $mapper): ?array
    {
        $parameters = [];

        if ($this->document) {
            $parameters['doc'] = $this->normalizeDocument($mapper, $this->document);
        }

        if ($this->upsert) {
            if ($this->upsert === true) {
                $parameters['doc_as_upsert'] = true;
            } else {
                $parameters['upsert'] = $this->normalizeDocument($mapper, $this->upsert);
            }
        }

        if ($this->script) {
            $parameters['script'] = $this->script;
        }

        return $parameters;
    }

    /**
     * Try to resolve document id from (in order):
     * - Explicitly defined id
     * - Extracted from field "_id" of document
     * - Extracted from entity of document using mapper
     * - Extracted from field "_id" of upsert
     * - Extracted from entity of upsert using mapper
     *
     * @return string resolved id
     * @throws InvalidQueryException When id cannot be resolved
     */
    private function resolveId(ElasticsearchMapperInterface $mapper): string
    {
        if ($id = $this->id) {
            return $id;
        }

        foreach ([$this->document, $this->upsert] as $doc) {
            if (is_array($doc)) {
                $id = $doc['_id'] ?? null;
            } elseif (is_object($doc)) {
                $id = $mapper->id($doc);
            }

            if ($id) {
                return $id;
            }
        }

        throw new InvalidQueryException('Update operation requires an id. Call UpdateOperation::id() to define it.');
    }

    /**
     * Normalize document to value handled by ES index
     *
     * @param array|object $document
     *
     * @return array Normalized document
     */
    private function normalizeDocument(ElasticsearchMapperInterface $mapper, $document): array
    {
        // Convert entity to array of fields
        if (is_object($document)) {
            $document = $mapper->toIndex($document);
        }

        // Remove _id field. It will be set into $this->id
        // and passed as query parameter before execution
        unset($document['_id']);

        return $document;
    }
}
